#include <stdio.h>
#define N 4
#define INF 9999

int min(int a, int b) {
    return (a < b) ? a : b;
}

int solveAssignmentProblem(int costMatrix[N][N]) {
    int i, j, u[N], v[N], p[N], way[N], minv[N], used[N];
    for (i = 0; i <= N; ++i)
        u[i] = v[i] = p[i] = way[i] = 0;

    for (i = 1; i <= N; ++i) {
        int j0 = 0, delta;
        for (j = 0; j <= N; ++j) {
            minv[j] = INF;
            used[j] = 0;
        }
        p[0] = i;
        do {
            used[j0] = 1;
            int i0 = p[j0], delta = INF, j1;
            for (j = 1; j <= N; ++j)
                if (!used[j]) {
                    int cur = costMatrix[i0 - 1][j - 1] - u[i0] - v[j];
                    if (cur < minv[j])
                        minv[j] = cur, way[j] = j0;
                    if (minv[j] < delta)
                        delta = minv[j], j1 = j;
                }
            for (j = 0; j <= N; ++j)
                if (used[j])
                    u[p[j]] += delta, v[j] -= delta;
                else
                    minv[j] -= delta;
            j0 = j1;
        } while (p[j0] != 0);
        do {
            int j1 = way[j0];
            p[j0] = p[j1];
            j0 = j1;
        } while (j0);
    }
    int result = -v[0];
    return result;
}

int main() {
    int costMatrix[N][N] = {
        {9, 2, 7, 8},
        {6, 4, 3, 7},
        {5, 8, 1, 8},
        {7, 6, 9, 4}
    };
    int result = solveAssignmentProblem(costMatrix);
    printf("Optimal cost: %d\n", result);
    return 0;
}
