#include <stdio.h>
#include <stdlib.h>

void addMatrices(int size, int A[][size], int B[][size], int C[][size]) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}

void subtractMatrices(int size, int A[][size], int B[][size], int C[][size]) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            C[i][j] = A[i][j] - B[i][j];
        }
    }
}

void strassen(int size, int A[][size], int B[][size], int C[][size]) {
    if (size == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int newSize = size / 2;
    int A11[newSize][newSize], A12[newSize][newSize], A21[newSize][newSize], A22[newSize][newSize];
    int B11[newSize][newSize], B12[newSize][newSize], B21[newSize][newSize], B22[newSize][newSize];
    int M1[newSize][newSize], M2[newSize][newSize], M3[newSize][newSize], M4[newSize][newSize];
    int M5[newSize][newSize], M6[newSize][newSize], M7[newSize][newSize];
    int temp1[newSize][newSize], temp2[newSize][newSize];

    // Divide matrices into sub-matrices
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + newSize];
            A21[i][j] = A[i + newSize][j];
            A22[i][j] = A[i + newSize][j + newSize];
            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + newSize];
            B21[i][j] = B[i + newSize][j];
            B22[i][j] = B[i + newSize][j + newSize];
        }
    }

    // M1 = (A11 + A22) * (B11 + B22)
    addMatrices(newSize, A11, A22, temp1);
    addMatrices(newSize, B11, B22, temp2);
    strassen(newSize, temp1, temp2, M1);

    // M2 = (A21 + A22) * B11
    addMatrices(newSize, A21, A22, temp1);
    strassen(newSize, temp1, B11, M2);

    // M3 = A11 * (B12 - B22)
    subtractMatrices(newSize, B12, B22, temp2);
    strassen(newSize, A11, temp2, M3);

    // M4 = A22 * (B21 - B11)
    subtractMatrices(newSize, B21, B11, temp2);
    strassen(newSize, A22, temp2, M4);

    // M5 = (A11 + A12) * B22
    addMatrices(newSize, A11, A12, temp1);
    strassen(newSize, temp1, B22, M5);

    // M6 = (A21 - A11) * (B11 + B12)
    subtractMatrices(newSize, A21, A11, temp1);
    addMatrices(newSize, B11, B12, temp2);
    strassen(newSize, temp1, temp2, M6);

    // M7 = (A12 - A22) * (B21 + B22)
    subtractMatrices(newSize, A12, A22, temp1);
    addMatrices(newSize, B21, B22, temp2);
    strassen(newSize, temp1, temp2, M7);

    // C11 = M1 + M4 - M5 + M7
    addMatrices(newSize, M1, M4, temp1);
    subtractMatrices(newSize, temp1, M5, temp1);
    addMatrices(newSize, temp1, M7, C11);

    // C12 = M3 + M5
    addMatrices(newSize, M3, M5, C12);

    // C21 = M2 + M4
    addMatrices(newSize, M2, M4, C21);

    // C22 = M1 - M2 + M3 + M6
    addMatrices(newSize, M1, M2, temp1);
    subtractMatrices(newSize, temp1, M3, temp1);
    addMatrices(newSize, temp1, M6, C22);

    // Combine sub-matrices into result matrix
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            C[i][j] = C11[i][j];
            C[i][j + newSize] = C12[i][j];
            C[i + newSize][j] = C21[i][j];
            C[i + newSize][j + newSize] = C22[i][j];
        }
    }
}

int main() {
    int size;

    // Input the size of the matrices
    printf("Enter the size of matrices (n x n): ");
    scanf("%d", &size);

    // Ensure the size is a power of 2
    if ((size & (size - 1)) != 0) {
        printf("Matrix size must be a power of 2.\n");
        return 1;
    }

    int A[size][size], B[size][size], C[size][size];

    // Input elements of the first matrix
    printf("Enter elements of the first matrix:\n");
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            scanf("%d", &A[i][j]);
        }
    }

    // Input elements of the second matrix
    printf("Enter elements of the second matrix:\n");
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            scanf("%d", &B[i][j]);
        }
    }

    // Perform matrix multiplication using Strassen's algorithm
    strassen(size, A, B, C);

    // Output the result matrix
    printf("Resultant matrix:\n");
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            printf("%d ", C[i][j]);
        }
        printf("\n");
    }

    return 0;
}
